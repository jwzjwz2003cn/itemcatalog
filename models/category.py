from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import relationship
import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from models import *

class Category(Base):
    """
    Category class represents the data model of the Category
    Table

    Attributes:
        id (int): primary key of the table, generated by db
        name (String): The name of the category
        items(Item[]): items referenced by the category_id as foreign
                       key in the Item table
    """
    __tablename__ = 'category'
    id = Column(Integer, primary_key=True)
    name = Column(String(250), nullable=False)
    items = relationship("Item",  backref="category")

    @property
    def serialize(self):
        """Return object data in easily serializeable format"""
        return {
            'name': self.name,
            'id': self.id,
            'items': self.serialize_items
        }

    @property
    def serialize_items(self):
        """
        Return object's relations in easily serializeable format.
        NB! Calls many2many's serialize property.
        """
        return [item.serialize for item in self.items]