from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import create_engine
Base = declarative_base()


class User(Base):
    """
    User class represents the data model of the Google User
    Table

    Attributes:
        id (int): primary key of the table, generated by db
        name (String): The name of google account owner
        email(String): The gmail address of the google account owner
        picture(String): The url of the google account's profile picture
    """
    __tablename__ = 'user'

    id = Column(Integer, primary_key=True)
    name = Column(String(250), nullable=False)
    email = Column(String(250), nullable=False)
    picture = Column(String(250))


class Category(Base):
    """
    Category class represents the data model of the Category
    Table

    Attributes:
        id (int): primary key of the table, generated by db
        name (String): The name of the category
        items(Item[]): items referenced by the category_id as foreign
                       key in the Item table
    """
    __tablename__ = 'category'
    id = Column(Integer, primary_key=True)
    name = Column(String(250), nullable=False)
    items = relationship("Item",  backref="category")

    @property
    def serialize(self):
        """Return object data in easily serializeable format"""
        return {
            'name': self.name,
            'id': self.id,
            'items': self.serialize_items
        }

    @property
    def serialize_items(self):
        """
        Return object's relations in easily serializeable format.
        NB! Calls many2many's serialize property.
        """
        return [item.serialize for item in self.items]


class Item(Base):
    """
    Item class represents the data model of the Item
    Table

    Attributes:
        id (int): primary key of the table, generated by db
        name (String): The name of the item
        Description (String): The description of the item
        category_id (int): The foreign key pointing to the category
                           entry in the Category table which the item
                           is belonging to
        user_id(String): The foreign key pointing to the user
                         entry in the User table who owns
                         the item.
        user(User): user entry referenced by the user_id foreign key in
              the User Table
    """
    __tablename__ = 'item'
    name = Column(String(80), nullable=False)
    id = Column(Integer, primary_key=True)
    description = Column(String(250))
    category_id = Column(Integer, ForeignKey('category.id'))
    user_id = Column(Integer, ForeignKey('user.id'))
    user = relationship(User)

    @property
    def serialize(self):
        """Return object data in easily serializeable format"""
        return {
            'name': self.name,
            'description': self.description,
            'id': self.id,
        }

engine = create_engine('sqlite:///catalog.db')
Base.metadata.create_all(engine)
